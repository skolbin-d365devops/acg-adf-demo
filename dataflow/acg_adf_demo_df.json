{
	"name": "acg_adf_demo_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "oahu_state_public_parking_lots_ds",
						"type": "DatasetReference"
					},
					"name": "oahuStatePublicParkingLots"
				},
				{
					"dataset": {
						"referenceName": "oahu",
						"type": "DatasetReference"
					},
					"name": "curatedSql"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "acg_adf_demo_storage_curated_ds",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Lot as string,",
				"          Name as string,",
				"          {Second Entrance/Cross Street} as string,",
				"          Island as string,",
				"          Stalls as string,",
				"          Type as string,",
				"          Payment as string,",
				"          Rates as string,",
				"          {Rate Limit} as string,",
				"          Address as string,",
				"          Latititude as string,",
				"          Longitidue as string,",
				"          GeoJSON as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> oahuStatePublicParkingLots",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> curatedSql",
				"oahuStatePublicParkingLots, curatedSql union(byName: true,",
				"     partitionBy('hash', 1))~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['results.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}